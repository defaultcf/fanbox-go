// Code generated by ogen, DO NOT EDIT.

package fanbox

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type Create struct {
	Body OptCreateBody `json:"body"`
}

// GetBody returns the value of Body.
func (s *Create) GetBody() OptCreateBody {
	return s.Body
}

// SetBody sets the value of Body.
func (s *Create) SetBody(val OptCreateBody) {
	s.Body = val
}

func (*Create) createPostRes() {}

type CreateBody struct {
	PostID OptString `json:"post_id"`
}

// GetPostID returns the value of PostID.
func (s *CreateBody) GetPostID() OptString {
	return s.PostID
}

// SetPostID sets the value of PostID.
func (s *CreateBody) SetPostID(val OptString) {
	s.PostID = val
}

type CreatePostBadRequestApplicationJSON jx.Raw

func (*CreatePostBadRequestApplicationJSON) createPostRes()       {}
func (*CreatePostBadRequestApplicationJSON) getEditablePostRes()  {}
func (*CreatePostBadRequestApplicationJSON) listManagedPostsRes() {}
func (*CreatePostBadRequestApplicationJSON) updatePostRes()       {}

type CreatePostReq struct {
	Type CreatePostReqType `json:"type"`
}

// GetType returns the value of Type.
func (s *CreatePostReq) GetType() CreatePostReqType {
	return s.Type
}

// SetType sets the value of Type.
func (s *CreatePostReq) SetType(val CreatePostReqType) {
	s.Type = val
}

type CreatePostReqType string

const (
	CreatePostReqTypeArticle CreatePostReqType = "article"
)

// AllValues returns all CreatePostReqType values.
func (CreatePostReqType) AllValues() []CreatePostReqType {
	return []CreatePostReqType{
		CreatePostReqTypeArticle,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePostReqType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePostReqTypeArticle:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePostReqType) UnmarshalText(data []byte) error {
	switch CreatePostReqType(data) {
	case CreatePostReqTypeArticle:
		*s = CreatePostReqTypeArticle
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CsrfToken struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *CsrfToken) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *CsrfToken) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/FanboxPost
type FanboxPost struct {
	ID          OptString           `json:"id"`
	Title       OptString           `json:"title"`
	Status      OptFanboxPostStatus `json:"status"`
	Permalink   OptString           `json:"permalink"`
	FeeRequired OptInt              `json:"feeRequired"`
	UpdatedAt   OptString           `json:"updatedAt"`
	PublishedAt OptString           `json:"publishedAt"`
	Body        OptFanboxPostBody   `json:"body"`
}

// GetID returns the value of ID.
func (s *FanboxPost) GetID() OptString {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *FanboxPost) GetTitle() OptString {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *FanboxPost) GetStatus() OptFanboxPostStatus {
	return s.Status
}

// GetPermalink returns the value of Permalink.
func (s *FanboxPost) GetPermalink() OptString {
	return s.Permalink
}

// GetFeeRequired returns the value of FeeRequired.
func (s *FanboxPost) GetFeeRequired() OptInt {
	return s.FeeRequired
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *FanboxPost) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetPublishedAt returns the value of PublishedAt.
func (s *FanboxPost) GetPublishedAt() OptString {
	return s.PublishedAt
}

// GetBody returns the value of Body.
func (s *FanboxPost) GetBody() OptFanboxPostBody {
	return s.Body
}

// SetID sets the value of ID.
func (s *FanboxPost) SetID(val OptString) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *FanboxPost) SetTitle(val OptString) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *FanboxPost) SetStatus(val OptFanboxPostStatus) {
	s.Status = val
}

// SetPermalink sets the value of Permalink.
func (s *FanboxPost) SetPermalink(val OptString) {
	s.Permalink = val
}

// SetFeeRequired sets the value of FeeRequired.
func (s *FanboxPost) SetFeeRequired(val OptInt) {
	s.FeeRequired = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *FanboxPost) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetPublishedAt sets the value of PublishedAt.
func (s *FanboxPost) SetPublishedAt(val OptString) {
	s.PublishedAt = val
}

// SetBody sets the value of Body.
func (s *FanboxPost) SetBody(val OptFanboxPostBody) {
	s.Body = val
}

type FanboxPostBody struct {
	Blocks      []FanboxPostBodyBlocksItem   `json:"blocks"`
	ImageMap    OptFanboxPostBodyImageMap    `json:"imageMap"`
	UrlEmbedMap OptFanboxPostBodyUrlEmbedMap `json:"urlEmbedMap"`
}

// GetBlocks returns the value of Blocks.
func (s *FanboxPostBody) GetBlocks() []FanboxPostBodyBlocksItem {
	return s.Blocks
}

// GetImageMap returns the value of ImageMap.
func (s *FanboxPostBody) GetImageMap() OptFanboxPostBodyImageMap {
	return s.ImageMap
}

// GetUrlEmbedMap returns the value of UrlEmbedMap.
func (s *FanboxPostBody) GetUrlEmbedMap() OptFanboxPostBodyUrlEmbedMap {
	return s.UrlEmbedMap
}

// SetBlocks sets the value of Blocks.
func (s *FanboxPostBody) SetBlocks(val []FanboxPostBodyBlocksItem) {
	s.Blocks = val
}

// SetImageMap sets the value of ImageMap.
func (s *FanboxPostBody) SetImageMap(val OptFanboxPostBodyImageMap) {
	s.ImageMap = val
}

// SetUrlEmbedMap sets the value of UrlEmbedMap.
func (s *FanboxPostBody) SetUrlEmbedMap(val OptFanboxPostBodyUrlEmbedMap) {
	s.UrlEmbedMap = val
}

type FanboxPostBodyBlocksItem struct {
	Type       OptFanboxPostBodyBlocksItemType      `json:"type"`
	Text       OptString                            `json:"text"`
	ImageId    OptString                            `json:"imageId"`
	UrlEmbedId OptString                            `json:"urlEmbedId"`
	Styles     []FanboxPostBodyBlocksItemStylesItem `json:"styles"`
}

// GetType returns the value of Type.
func (s *FanboxPostBodyBlocksItem) GetType() OptFanboxPostBodyBlocksItemType {
	return s.Type
}

// GetText returns the value of Text.
func (s *FanboxPostBodyBlocksItem) GetText() OptString {
	return s.Text
}

// GetImageId returns the value of ImageId.
func (s *FanboxPostBodyBlocksItem) GetImageId() OptString {
	return s.ImageId
}

// GetUrlEmbedId returns the value of UrlEmbedId.
func (s *FanboxPostBodyBlocksItem) GetUrlEmbedId() OptString {
	return s.UrlEmbedId
}

// GetStyles returns the value of Styles.
func (s *FanboxPostBodyBlocksItem) GetStyles() []FanboxPostBodyBlocksItemStylesItem {
	return s.Styles
}

// SetType sets the value of Type.
func (s *FanboxPostBodyBlocksItem) SetType(val OptFanboxPostBodyBlocksItemType) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *FanboxPostBodyBlocksItem) SetText(val OptString) {
	s.Text = val
}

// SetImageId sets the value of ImageId.
func (s *FanboxPostBodyBlocksItem) SetImageId(val OptString) {
	s.ImageId = val
}

// SetUrlEmbedId sets the value of UrlEmbedId.
func (s *FanboxPostBodyBlocksItem) SetUrlEmbedId(val OptString) {
	s.UrlEmbedId = val
}

// SetStyles sets the value of Styles.
func (s *FanboxPostBodyBlocksItem) SetStyles(val []FanboxPostBodyBlocksItemStylesItem) {
	s.Styles = val
}

type FanboxPostBodyBlocksItemStylesItem struct {
	Type   OptString `json:"type"`
	Offset OptInt    `json:"offset"`
	Length OptInt    `json:"length"`
}

// GetType returns the value of Type.
func (s *FanboxPostBodyBlocksItemStylesItem) GetType() OptString {
	return s.Type
}

// GetOffset returns the value of Offset.
func (s *FanboxPostBodyBlocksItemStylesItem) GetOffset() OptInt {
	return s.Offset
}

// GetLength returns the value of Length.
func (s *FanboxPostBodyBlocksItemStylesItem) GetLength() OptInt {
	return s.Length
}

// SetType sets the value of Type.
func (s *FanboxPostBodyBlocksItemStylesItem) SetType(val OptString) {
	s.Type = val
}

// SetOffset sets the value of Offset.
func (s *FanboxPostBodyBlocksItemStylesItem) SetOffset(val OptInt) {
	s.Offset = val
}

// SetLength sets the value of Length.
func (s *FanboxPostBodyBlocksItemStylesItem) SetLength(val OptInt) {
	s.Length = val
}

type FanboxPostBodyBlocksItemType string

const (
	FanboxPostBodyBlocksItemTypeP        FanboxPostBodyBlocksItemType = "p"
	FanboxPostBodyBlocksItemTypeHeader   FanboxPostBodyBlocksItemType = "header"
	FanboxPostBodyBlocksItemTypeImage    FanboxPostBodyBlocksItemType = "image"
	FanboxPostBodyBlocksItemTypeURLEmbed FanboxPostBodyBlocksItemType = "url_embed"
)

// AllValues returns all FanboxPostBodyBlocksItemType values.
func (FanboxPostBodyBlocksItemType) AllValues() []FanboxPostBodyBlocksItemType {
	return []FanboxPostBodyBlocksItemType{
		FanboxPostBodyBlocksItemTypeP,
		FanboxPostBodyBlocksItemTypeHeader,
		FanboxPostBodyBlocksItemTypeImage,
		FanboxPostBodyBlocksItemTypeURLEmbed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FanboxPostBodyBlocksItemType) MarshalText() ([]byte, error) {
	switch s {
	case FanboxPostBodyBlocksItemTypeP:
		return []byte(s), nil
	case FanboxPostBodyBlocksItemTypeHeader:
		return []byte(s), nil
	case FanboxPostBodyBlocksItemTypeImage:
		return []byte(s), nil
	case FanboxPostBodyBlocksItemTypeURLEmbed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FanboxPostBodyBlocksItemType) UnmarshalText(data []byte) error {
	switch FanboxPostBodyBlocksItemType(data) {
	case FanboxPostBodyBlocksItemTypeP:
		*s = FanboxPostBodyBlocksItemTypeP
		return nil
	case FanboxPostBodyBlocksItemTypeHeader:
		*s = FanboxPostBodyBlocksItemTypeHeader
		return nil
	case FanboxPostBodyBlocksItemTypeImage:
		*s = FanboxPostBodyBlocksItemTypeImage
		return nil
	case FanboxPostBodyBlocksItemTypeURLEmbed:
		*s = FanboxPostBodyBlocksItemTypeURLEmbed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FanboxPostBodyImageMap map[string]FanboxPostBodyImageMapItem

func (s *FanboxPostBodyImageMap) init() FanboxPostBodyImageMap {
	m := *s
	if m == nil {
		m = map[string]FanboxPostBodyImageMapItem{}
		*s = m
	}
	return m
}

type FanboxPostBodyImageMapItem struct {
	ID           OptString `json:"id"`
	Extension    OptString `json:"extension"`
	OriginalUrl  OptString `json:"originalUrl"`
	ThumbnailUrl OptString `json:"thumbnailUrl"`
}

// GetID returns the value of ID.
func (s *FanboxPostBodyImageMapItem) GetID() OptString {
	return s.ID
}

// GetExtension returns the value of Extension.
func (s *FanboxPostBodyImageMapItem) GetExtension() OptString {
	return s.Extension
}

// GetOriginalUrl returns the value of OriginalUrl.
func (s *FanboxPostBodyImageMapItem) GetOriginalUrl() OptString {
	return s.OriginalUrl
}

// GetThumbnailUrl returns the value of ThumbnailUrl.
func (s *FanboxPostBodyImageMapItem) GetThumbnailUrl() OptString {
	return s.ThumbnailUrl
}

// SetID sets the value of ID.
func (s *FanboxPostBodyImageMapItem) SetID(val OptString) {
	s.ID = val
}

// SetExtension sets the value of Extension.
func (s *FanboxPostBodyImageMapItem) SetExtension(val OptString) {
	s.Extension = val
}

// SetOriginalUrl sets the value of OriginalUrl.
func (s *FanboxPostBodyImageMapItem) SetOriginalUrl(val OptString) {
	s.OriginalUrl = val
}

// SetThumbnailUrl sets the value of ThumbnailUrl.
func (s *FanboxPostBodyImageMapItem) SetThumbnailUrl(val OptString) {
	s.ThumbnailUrl = val
}

type FanboxPostBodyUrlEmbedMap map[string]FanboxPostBodyUrlEmbedMapItem

func (s *FanboxPostBodyUrlEmbedMap) init() FanboxPostBodyUrlEmbedMap {
	m := *s
	if m == nil {
		m = map[string]FanboxPostBodyUrlEmbedMapItem{}
		*s = m
	}
	return m
}

type FanboxPostBodyUrlEmbedMapItem struct {
	ID       OptString                                `json:"id"`
	Type     OptFanboxPostBodyUrlEmbedMapItemType     `json:"type"`
	HTML     OptString                                `json:"html"`
	URL      OptString                                `json:"url"`
	PostInfo OptFanboxPostBodyUrlEmbedMapItemPostInfo `json:"post_info"`
}

// GetID returns the value of ID.
func (s *FanboxPostBodyUrlEmbedMapItem) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *FanboxPostBodyUrlEmbedMapItem) GetType() OptFanboxPostBodyUrlEmbedMapItemType {
	return s.Type
}

// GetHTML returns the value of HTML.
func (s *FanboxPostBodyUrlEmbedMapItem) GetHTML() OptString {
	return s.HTML
}

// GetURL returns the value of URL.
func (s *FanboxPostBodyUrlEmbedMapItem) GetURL() OptString {
	return s.URL
}

// GetPostInfo returns the value of PostInfo.
func (s *FanboxPostBodyUrlEmbedMapItem) GetPostInfo() OptFanboxPostBodyUrlEmbedMapItemPostInfo {
	return s.PostInfo
}

// SetID sets the value of ID.
func (s *FanboxPostBodyUrlEmbedMapItem) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *FanboxPostBodyUrlEmbedMapItem) SetType(val OptFanboxPostBodyUrlEmbedMapItemType) {
	s.Type = val
}

// SetHTML sets the value of HTML.
func (s *FanboxPostBodyUrlEmbedMapItem) SetHTML(val OptString) {
	s.HTML = val
}

// SetURL sets the value of URL.
func (s *FanboxPostBodyUrlEmbedMapItem) SetURL(val OptString) {
	s.URL = val
}

// SetPostInfo sets the value of PostInfo.
func (s *FanboxPostBodyUrlEmbedMapItem) SetPostInfo(val OptFanboxPostBodyUrlEmbedMapItemPostInfo) {
	s.PostInfo = val
}

type FanboxPostBodyUrlEmbedMapItemPostInfo struct {
	ID        OptString `json:"id"`
	CreatorId OptString `json:"creatorId"`
}

// GetID returns the value of ID.
func (s *FanboxPostBodyUrlEmbedMapItemPostInfo) GetID() OptString {
	return s.ID
}

// GetCreatorId returns the value of CreatorId.
func (s *FanboxPostBodyUrlEmbedMapItemPostInfo) GetCreatorId() OptString {
	return s.CreatorId
}

// SetID sets the value of ID.
func (s *FanboxPostBodyUrlEmbedMapItemPostInfo) SetID(val OptString) {
	s.ID = val
}

// SetCreatorId sets the value of CreatorId.
func (s *FanboxPostBodyUrlEmbedMapItemPostInfo) SetCreatorId(val OptString) {
	s.CreatorId = val
}

type FanboxPostBodyUrlEmbedMapItemType string

const (
	FanboxPostBodyUrlEmbedMapItemTypeHTMLCard   FanboxPostBodyUrlEmbedMapItemType = "html.card"
	FanboxPostBodyUrlEmbedMapItemTypeHTML       FanboxPostBodyUrlEmbedMapItemType = "html"
	FanboxPostBodyUrlEmbedMapItemTypeFanboxPost FanboxPostBodyUrlEmbedMapItemType = "fanbox.post"
	FanboxPostBodyUrlEmbedMapItemTypeDefault    FanboxPostBodyUrlEmbedMapItemType = "default"
)

// AllValues returns all FanboxPostBodyUrlEmbedMapItemType values.
func (FanboxPostBodyUrlEmbedMapItemType) AllValues() []FanboxPostBodyUrlEmbedMapItemType {
	return []FanboxPostBodyUrlEmbedMapItemType{
		FanboxPostBodyUrlEmbedMapItemTypeHTMLCard,
		FanboxPostBodyUrlEmbedMapItemTypeHTML,
		FanboxPostBodyUrlEmbedMapItemTypeFanboxPost,
		FanboxPostBodyUrlEmbedMapItemTypeDefault,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FanboxPostBodyUrlEmbedMapItemType) MarshalText() ([]byte, error) {
	switch s {
	case FanboxPostBodyUrlEmbedMapItemTypeHTMLCard:
		return []byte(s), nil
	case FanboxPostBodyUrlEmbedMapItemTypeHTML:
		return []byte(s), nil
	case FanboxPostBodyUrlEmbedMapItemTypeFanboxPost:
		return []byte(s), nil
	case FanboxPostBodyUrlEmbedMapItemTypeDefault:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FanboxPostBodyUrlEmbedMapItemType) UnmarshalText(data []byte) error {
	switch FanboxPostBodyUrlEmbedMapItemType(data) {
	case FanboxPostBodyUrlEmbedMapItemTypeHTMLCard:
		*s = FanboxPostBodyUrlEmbedMapItemTypeHTMLCard
		return nil
	case FanboxPostBodyUrlEmbedMapItemTypeHTML:
		*s = FanboxPostBodyUrlEmbedMapItemTypeHTML
		return nil
	case FanboxPostBodyUrlEmbedMapItemTypeFanboxPost:
		*s = FanboxPostBodyUrlEmbedMapItemTypeFanboxPost
		return nil
	case FanboxPostBodyUrlEmbedMapItemTypeDefault:
		*s = FanboxPostBodyUrlEmbedMapItemTypeDefault
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FanboxPostStatus string

const (
	FanboxPostStatusDraft     FanboxPostStatus = "draft"
	FanboxPostStatusPublished FanboxPostStatus = "published"
)

// AllValues returns all FanboxPostStatus values.
func (FanboxPostStatus) AllValues() []FanboxPostStatus {
	return []FanboxPostStatus{
		FanboxPostStatusDraft,
		FanboxPostStatusPublished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FanboxPostStatus) MarshalText() ([]byte, error) {
	switch s {
	case FanboxPostStatusDraft:
		return []byte(s), nil
	case FanboxPostStatusPublished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FanboxPostStatus) UnmarshalText(data []byte) error {
	switch FanboxPostStatus(data) {
	case FanboxPostStatusDraft:
		*s = FanboxPostStatusDraft
		return nil
	case FanboxPostStatusPublished:
		*s = FanboxPostStatusPublished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Get struct {
	Body OptFanboxPost `json:"body"`
}

// GetBody returns the value of Body.
func (s *Get) GetBody() OptFanboxPost {
	return s.Body
}

// SetBody sets the value of Body.
func (s *Get) SetBody(val OptFanboxPost) {
	s.Body = val
}

func (*Get) getEditablePostRes() {}

type List struct {
	Body []FanboxPost `json:"body"`
}

// GetBody returns the value of Body.
func (s *List) GetBody() []FanboxPost {
	return s.Body
}

// SetBody sets the value of Body.
func (s *List) SetBody(val []FanboxPost) {
	s.Body = val
}

func (*List) listManagedPostsRes() {}

// NewOptCreateBody returns new OptCreateBody with value set to v.
func NewOptCreateBody(v CreateBody) OptCreateBody {
	return OptCreateBody{
		Value: v,
		Set:   true,
	}
}

// OptCreateBody is optional CreateBody.
type OptCreateBody struct {
	Value CreateBody
	Set   bool
}

// IsSet returns true if OptCreateBody was set.
func (o OptCreateBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateBody) Reset() {
	var v CreateBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateBody) SetTo(v CreateBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateBody) Get() (v CreateBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateBody) Or(d CreateBody) CreateBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePostReq returns new OptCreatePostReq with value set to v.
func NewOptCreatePostReq(v CreatePostReq) OptCreatePostReq {
	return OptCreatePostReq{
		Value: v,
		Set:   true,
	}
}

// OptCreatePostReq is optional CreatePostReq.
type OptCreatePostReq struct {
	Value CreatePostReq
	Set   bool
}

// IsSet returns true if OptCreatePostReq was set.
func (o OptCreatePostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePostReq) Reset() {
	var v CreatePostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePostReq) SetTo(v CreatePostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePostReq) Get() (v CreatePostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePostReq) Or(d CreatePostReq) CreatePostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFanboxPost returns new OptFanboxPost with value set to v.
func NewOptFanboxPost(v FanboxPost) OptFanboxPost {
	return OptFanboxPost{
		Value: v,
		Set:   true,
	}
}

// OptFanboxPost is optional FanboxPost.
type OptFanboxPost struct {
	Value FanboxPost
	Set   bool
}

// IsSet returns true if OptFanboxPost was set.
func (o OptFanboxPost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFanboxPost) Reset() {
	var v FanboxPost
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFanboxPost) SetTo(v FanboxPost) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFanboxPost) Get() (v FanboxPost, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFanboxPost) Or(d FanboxPost) FanboxPost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFanboxPostBody returns new OptFanboxPostBody with value set to v.
func NewOptFanboxPostBody(v FanboxPostBody) OptFanboxPostBody {
	return OptFanboxPostBody{
		Value: v,
		Set:   true,
	}
}

// OptFanboxPostBody is optional FanboxPostBody.
type OptFanboxPostBody struct {
	Value FanboxPostBody
	Set   bool
}

// IsSet returns true if OptFanboxPostBody was set.
func (o OptFanboxPostBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFanboxPostBody) Reset() {
	var v FanboxPostBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFanboxPostBody) SetTo(v FanboxPostBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFanboxPostBody) Get() (v FanboxPostBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFanboxPostBody) Or(d FanboxPostBody) FanboxPostBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFanboxPostBodyBlocksItemType returns new OptFanboxPostBodyBlocksItemType with value set to v.
func NewOptFanboxPostBodyBlocksItemType(v FanboxPostBodyBlocksItemType) OptFanboxPostBodyBlocksItemType {
	return OptFanboxPostBodyBlocksItemType{
		Value: v,
		Set:   true,
	}
}

// OptFanboxPostBodyBlocksItemType is optional FanboxPostBodyBlocksItemType.
type OptFanboxPostBodyBlocksItemType struct {
	Value FanboxPostBodyBlocksItemType
	Set   bool
}

// IsSet returns true if OptFanboxPostBodyBlocksItemType was set.
func (o OptFanboxPostBodyBlocksItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFanboxPostBodyBlocksItemType) Reset() {
	var v FanboxPostBodyBlocksItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFanboxPostBodyBlocksItemType) SetTo(v FanboxPostBodyBlocksItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFanboxPostBodyBlocksItemType) Get() (v FanboxPostBodyBlocksItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFanboxPostBodyBlocksItemType) Or(d FanboxPostBodyBlocksItemType) FanboxPostBodyBlocksItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFanboxPostBodyImageMap returns new OptFanboxPostBodyImageMap with value set to v.
func NewOptFanboxPostBodyImageMap(v FanboxPostBodyImageMap) OptFanboxPostBodyImageMap {
	return OptFanboxPostBodyImageMap{
		Value: v,
		Set:   true,
	}
}

// OptFanboxPostBodyImageMap is optional FanboxPostBodyImageMap.
type OptFanboxPostBodyImageMap struct {
	Value FanboxPostBodyImageMap
	Set   bool
}

// IsSet returns true if OptFanboxPostBodyImageMap was set.
func (o OptFanboxPostBodyImageMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFanboxPostBodyImageMap) Reset() {
	var v FanboxPostBodyImageMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFanboxPostBodyImageMap) SetTo(v FanboxPostBodyImageMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFanboxPostBodyImageMap) Get() (v FanboxPostBodyImageMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFanboxPostBodyImageMap) Or(d FanboxPostBodyImageMap) FanboxPostBodyImageMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFanboxPostBodyUrlEmbedMap returns new OptFanboxPostBodyUrlEmbedMap with value set to v.
func NewOptFanboxPostBodyUrlEmbedMap(v FanboxPostBodyUrlEmbedMap) OptFanboxPostBodyUrlEmbedMap {
	return OptFanboxPostBodyUrlEmbedMap{
		Value: v,
		Set:   true,
	}
}

// OptFanboxPostBodyUrlEmbedMap is optional FanboxPostBodyUrlEmbedMap.
type OptFanboxPostBodyUrlEmbedMap struct {
	Value FanboxPostBodyUrlEmbedMap
	Set   bool
}

// IsSet returns true if OptFanboxPostBodyUrlEmbedMap was set.
func (o OptFanboxPostBodyUrlEmbedMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFanboxPostBodyUrlEmbedMap) Reset() {
	var v FanboxPostBodyUrlEmbedMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFanboxPostBodyUrlEmbedMap) SetTo(v FanboxPostBodyUrlEmbedMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFanboxPostBodyUrlEmbedMap) Get() (v FanboxPostBodyUrlEmbedMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFanboxPostBodyUrlEmbedMap) Or(d FanboxPostBodyUrlEmbedMap) FanboxPostBodyUrlEmbedMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFanboxPostBodyUrlEmbedMapItemPostInfo returns new OptFanboxPostBodyUrlEmbedMapItemPostInfo with value set to v.
func NewOptFanboxPostBodyUrlEmbedMapItemPostInfo(v FanboxPostBodyUrlEmbedMapItemPostInfo) OptFanboxPostBodyUrlEmbedMapItemPostInfo {
	return OptFanboxPostBodyUrlEmbedMapItemPostInfo{
		Value: v,
		Set:   true,
	}
}

// OptFanboxPostBodyUrlEmbedMapItemPostInfo is optional FanboxPostBodyUrlEmbedMapItemPostInfo.
type OptFanboxPostBodyUrlEmbedMapItemPostInfo struct {
	Value FanboxPostBodyUrlEmbedMapItemPostInfo
	Set   bool
}

// IsSet returns true if OptFanboxPostBodyUrlEmbedMapItemPostInfo was set.
func (o OptFanboxPostBodyUrlEmbedMapItemPostInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFanboxPostBodyUrlEmbedMapItemPostInfo) Reset() {
	var v FanboxPostBodyUrlEmbedMapItemPostInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFanboxPostBodyUrlEmbedMapItemPostInfo) SetTo(v FanboxPostBodyUrlEmbedMapItemPostInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFanboxPostBodyUrlEmbedMapItemPostInfo) Get() (v FanboxPostBodyUrlEmbedMapItemPostInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFanboxPostBodyUrlEmbedMapItemPostInfo) Or(d FanboxPostBodyUrlEmbedMapItemPostInfo) FanboxPostBodyUrlEmbedMapItemPostInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFanboxPostBodyUrlEmbedMapItemType returns new OptFanboxPostBodyUrlEmbedMapItemType with value set to v.
func NewOptFanboxPostBodyUrlEmbedMapItemType(v FanboxPostBodyUrlEmbedMapItemType) OptFanboxPostBodyUrlEmbedMapItemType {
	return OptFanboxPostBodyUrlEmbedMapItemType{
		Value: v,
		Set:   true,
	}
}

// OptFanboxPostBodyUrlEmbedMapItemType is optional FanboxPostBodyUrlEmbedMapItemType.
type OptFanboxPostBodyUrlEmbedMapItemType struct {
	Value FanboxPostBodyUrlEmbedMapItemType
	Set   bool
}

// IsSet returns true if OptFanboxPostBodyUrlEmbedMapItemType was set.
func (o OptFanboxPostBodyUrlEmbedMapItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFanboxPostBodyUrlEmbedMapItemType) Reset() {
	var v FanboxPostBodyUrlEmbedMapItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFanboxPostBodyUrlEmbedMapItemType) SetTo(v FanboxPostBodyUrlEmbedMapItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFanboxPostBodyUrlEmbedMapItemType) Get() (v FanboxPostBodyUrlEmbedMapItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFanboxPostBodyUrlEmbedMapItemType) Or(d FanboxPostBodyUrlEmbedMapItemType) FanboxPostBodyUrlEmbedMapItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFanboxPostStatus returns new OptFanboxPostStatus with value set to v.
func NewOptFanboxPostStatus(v FanboxPostStatus) OptFanboxPostStatus {
	return OptFanboxPostStatus{
		Value: v,
		Set:   true,
	}
}

// OptFanboxPostStatus is optional FanboxPostStatus.
type OptFanboxPostStatus struct {
	Value FanboxPostStatus
	Set   bool
}

// IsSet returns true if OptFanboxPostStatus was set.
func (o OptFanboxPostStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFanboxPostStatus) Reset() {
	var v FanboxPostStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFanboxPostStatus) SetTo(v FanboxPostStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFanboxPostStatus) Get() (v FanboxPostStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFanboxPostStatus) Or(d FanboxPostStatus) FanboxPostStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePostReq returns new OptUpdatePostReq with value set to v.
func NewOptUpdatePostReq(v UpdatePostReq) OptUpdatePostReq {
	return OptUpdatePostReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePostReq is optional UpdatePostReq.
type OptUpdatePostReq struct {
	Value UpdatePostReq
	Set   bool
}

// IsSet returns true if OptUpdatePostReq was set.
func (o OptUpdatePostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePostReq) Reset() {
	var v UpdatePostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePostReq) SetTo(v UpdatePostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePostReq) Get() (v UpdatePostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePostReq) Or(d UpdatePostReq) UpdatePostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePostReqStatus returns new OptUpdatePostReqStatus with value set to v.
func NewOptUpdatePostReqStatus(v UpdatePostReqStatus) OptUpdatePostReqStatus {
	return OptUpdatePostReqStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePostReqStatus is optional UpdatePostReqStatus.
type OptUpdatePostReqStatus struct {
	Value UpdatePostReqStatus
	Set   bool
}

// IsSet returns true if OptUpdatePostReqStatus was set.
func (o OptUpdatePostReqStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePostReqStatus) Reset() {
	var v UpdatePostReqStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePostReqStatus) SetTo(v UpdatePostReqStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePostReqStatus) Get() (v UpdatePostReqStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePostReqStatus) Or(d UpdatePostReqStatus) UpdatePostReqStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type SessionId struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *SessionId) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *SessionId) SetAPIKey(val string) {
	s.APIKey = val
}

type Update struct {
	Body OptFanboxPost `json:"body"`
}

// GetBody returns the value of Body.
func (s *Update) GetBody() OptFanboxPost {
	return s.Body
}

// SetBody sets the value of Body.
func (s *Update) SetBody(val OptFanboxPost) {
	s.Body = val
}

func (*Update) updatePostRes() {}

type UpdatePostReq struct {
	PostId      OptString              `json:"postId"`
	Status      OptUpdatePostReqStatus `json:"status"`
	FeeRequired OptString              `json:"feeRequired"`
	Title       OptString              `json:"title"`
	Body        OptString              `json:"body"`
	Tags        []string               `json:"tags"`
	Tt          OptString              `json:"tt"`
}

// GetPostId returns the value of PostId.
func (s *UpdatePostReq) GetPostId() OptString {
	return s.PostId
}

// GetStatus returns the value of Status.
func (s *UpdatePostReq) GetStatus() OptUpdatePostReqStatus {
	return s.Status
}

// GetFeeRequired returns the value of FeeRequired.
func (s *UpdatePostReq) GetFeeRequired() OptString {
	return s.FeeRequired
}

// GetTitle returns the value of Title.
func (s *UpdatePostReq) GetTitle() OptString {
	return s.Title
}

// GetBody returns the value of Body.
func (s *UpdatePostReq) GetBody() OptString {
	return s.Body
}

// GetTags returns the value of Tags.
func (s *UpdatePostReq) GetTags() []string {
	return s.Tags
}

// GetTt returns the value of Tt.
func (s *UpdatePostReq) GetTt() OptString {
	return s.Tt
}

// SetPostId sets the value of PostId.
func (s *UpdatePostReq) SetPostId(val OptString) {
	s.PostId = val
}

// SetStatus sets the value of Status.
func (s *UpdatePostReq) SetStatus(val OptUpdatePostReqStatus) {
	s.Status = val
}

// SetFeeRequired sets the value of FeeRequired.
func (s *UpdatePostReq) SetFeeRequired(val OptString) {
	s.FeeRequired = val
}

// SetTitle sets the value of Title.
func (s *UpdatePostReq) SetTitle(val OptString) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *UpdatePostReq) SetBody(val OptString) {
	s.Body = val
}

// SetTags sets the value of Tags.
func (s *UpdatePostReq) SetTags(val []string) {
	s.Tags = val
}

// SetTt sets the value of Tt.
func (s *UpdatePostReq) SetTt(val OptString) {
	s.Tt = val
}

type UpdatePostReqStatus string

const (
	UpdatePostReqStatusDraft     UpdatePostReqStatus = "draft"
	UpdatePostReqStatusPublished UpdatePostReqStatus = "published"
)

// AllValues returns all UpdatePostReqStatus values.
func (UpdatePostReqStatus) AllValues() []UpdatePostReqStatus {
	return []UpdatePostReqStatus{
		UpdatePostReqStatusDraft,
		UpdatePostReqStatusPublished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdatePostReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdatePostReqStatusDraft:
		return []byte(s), nil
	case UpdatePostReqStatusPublished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdatePostReqStatus) UnmarshalText(data []byte) error {
	switch UpdatePostReqStatus(data) {
	case UpdatePostReqStatusDraft:
		*s = UpdatePostReqStatusDraft
		return nil
	case UpdatePostReqStatusPublished:
		*s = UpdatePostReqStatusPublished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
