// Code generated by ogen, DO NOT EDIT.

package fanbox

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type Create struct {
	Body OptCreateBody `json:"body"`
}

// GetBody returns the value of Body.
func (s *Create) GetBody() OptCreateBody {
	return s.Body
}

// SetBody sets the value of Body.
func (s *Create) SetBody(val OptCreateBody) {
	s.Body = val
}

func (*Create) createPostRes() {}

type CreateBody struct {
	PostId OptString `json:"postId"`
}

// GetPostId returns the value of PostId.
func (s *CreateBody) GetPostId() OptString {
	return s.PostId
}

// SetPostId sets the value of PostId.
func (s *CreateBody) SetPostId(val OptString) {
	s.PostId = val
}

type CreatePostBadRequestApplicationJSON jx.Raw

func (*CreatePostBadRequestApplicationJSON) createPostRes()       {}
func (*CreatePostBadRequestApplicationJSON) deletePostRes()       {}
func (*CreatePostBadRequestApplicationJSON) getEditablePostRes()  {}
func (*CreatePostBadRequestApplicationJSON) listManagedPostsRes() {}
func (*CreatePostBadRequestApplicationJSON) updatePostRes()       {}

type CreatePostReq struct {
	Type CreatePostReqType `json:"type"`
}

// GetType returns the value of Type.
func (s *CreatePostReq) GetType() CreatePostReqType {
	return s.Type
}

// SetType sets the value of Type.
func (s *CreatePostReq) SetType(val CreatePostReqType) {
	s.Type = val
}

type CreatePostReqType string

const (
	CreatePostReqTypeArticle CreatePostReqType = "article"
)

// AllValues returns all CreatePostReqType values.
func (CreatePostReqType) AllValues() []CreatePostReqType {
	return []CreatePostReqType{
		CreatePostReqTypeArticle,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePostReqType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePostReqTypeArticle:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePostReqType) UnmarshalText(data []byte) error {
	switch CreatePostReqType(data) {
	case CreatePostReqTypeArticle:
		*s = CreatePostReqTypeArticle
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CsrfToken struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *CsrfToken) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *CsrfToken) SetAPIKey(val string) {
	s.APIKey = val
}

type Delete struct {
	Body OptNull `json:"body"`
}

// GetBody returns the value of Body.
func (s *Delete) GetBody() OptNull {
	return s.Body
}

// SetBody sets the value of Body.
func (s *Delete) SetBody(val OptNull) {
	s.Body = val
}

func (*Delete) deletePostRes() {}

type DeletePostReq struct {
	PostId string `json:"postId"`
}

// GetPostId returns the value of PostId.
func (s *DeletePostReq) GetPostId() string {
	return s.PostId
}

// SetPostId sets the value of PostId.
func (s *DeletePostReq) SetPostId(val string) {
	s.PostId = val
}

type Get struct {
	Body OptPost `json:"body"`
}

// GetBody returns the value of Body.
func (s *Get) GetBody() OptPost {
	return s.Body
}

// SetBody sets the value of Body.
func (s *Get) SetBody(val OptPost) {
	s.Body = val
}

func (*Get) getEditablePostRes() {}

type List struct {
	Body []Post `json:"body"`
}

// GetBody returns the value of Body.
func (s *List) GetBody() []Post {
	return s.Body
}

// SetBody sets the value of Body.
func (s *List) SetBody(val []Post) {
	s.Body = val
}

func (*List) listManagedPostsRes() {}

// NewOptCreateBody returns new OptCreateBody with value set to v.
func NewOptCreateBody(v CreateBody) OptCreateBody {
	return OptCreateBody{
		Value: v,
		Set:   true,
	}
}

// OptCreateBody is optional CreateBody.
type OptCreateBody struct {
	Value CreateBody
	Set   bool
}

// IsSet returns true if OptCreateBody was set.
func (o OptCreateBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateBody) Reset() {
	var v CreateBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateBody) SetTo(v CreateBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateBody) Get() (v CreateBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateBody) Or(d CreateBody) CreateBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePostReq returns new OptCreatePostReq with value set to v.
func NewOptCreatePostReq(v CreatePostReq) OptCreatePostReq {
	return OptCreatePostReq{
		Value: v,
		Set:   true,
	}
}

// OptCreatePostReq is optional CreatePostReq.
type OptCreatePostReq struct {
	Value CreatePostReq
	Set   bool
}

// IsSet returns true if OptCreatePostReq was set.
func (o OptCreatePostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePostReq) Reset() {
	var v CreatePostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePostReq) SetTo(v CreatePostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePostReq) Get() (v CreatePostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePostReq) Or(d CreatePostReq) CreatePostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeletePostReq returns new OptDeletePostReq with value set to v.
func NewOptDeletePostReq(v DeletePostReq) OptDeletePostReq {
	return OptDeletePostReq{
		Value: v,
		Set:   true,
	}
}

// OptDeletePostReq is optional DeletePostReq.
type OptDeletePostReq struct {
	Value DeletePostReq
	Set   bool
}

// IsSet returns true if OptDeletePostReq was set.
func (o OptDeletePostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeletePostReq) Reset() {
	var v DeletePostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeletePostReq) SetTo(v DeletePostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeletePostReq) Get() (v DeletePostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeletePostReq) Or(d DeletePostReq) DeletePostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNull returns new OptNull with value set to v.
func NewOptNull(v struct{}) OptNull {
	return OptNull{
		Value: v,
		Set:   true,
	}
}

// OptNull is optional struct{}.
type OptNull struct {
	Value struct{}
	Set   bool
}

// IsSet returns true if OptNull was set.
func (o OptNull) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNull) Reset() {
	var v struct{}
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNull) SetTo(v struct{}) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNull) Get() (v struct{}, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNull) Or(d struct{}) struct{} {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPost returns new OptPost with value set to v.
func NewOptPost(v Post) OptPost {
	return OptPost{
		Value: v,
		Set:   true,
	}
}

// OptPost is optional Post.
type OptPost struct {
	Value Post
	Set   bool
}

// IsSet returns true if OptPost was set.
func (o OptPost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPost) Reset() {
	var v Post
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPost) SetTo(v Post) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPost) Get() (v Post, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPost) Or(d Post) Post {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostBody returns new OptPostBody with value set to v.
func NewOptPostBody(v PostBody) OptPostBody {
	return OptPostBody{
		Value: v,
		Set:   true,
	}
}

// OptPostBody is optional PostBody.
type OptPostBody struct {
	Value PostBody
	Set   bool
}

// IsSet returns true if OptPostBody was set.
func (o OptPostBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostBody) Reset() {
	var v PostBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostBody) SetTo(v PostBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostBody) Get() (v PostBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostBody) Or(d PostBody) PostBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostBodyBlocksItemStylesItemType returns new OptPostBodyBlocksItemStylesItemType with value set to v.
func NewOptPostBodyBlocksItemStylesItemType(v PostBodyBlocksItemStylesItemType) OptPostBodyBlocksItemStylesItemType {
	return OptPostBodyBlocksItemStylesItemType{
		Value: v,
		Set:   true,
	}
}

// OptPostBodyBlocksItemStylesItemType is optional PostBodyBlocksItemStylesItemType.
type OptPostBodyBlocksItemStylesItemType struct {
	Value PostBodyBlocksItemStylesItemType
	Set   bool
}

// IsSet returns true if OptPostBodyBlocksItemStylesItemType was set.
func (o OptPostBodyBlocksItemStylesItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostBodyBlocksItemStylesItemType) Reset() {
	var v PostBodyBlocksItemStylesItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostBodyBlocksItemStylesItemType) SetTo(v PostBodyBlocksItemStylesItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostBodyBlocksItemStylesItemType) Get() (v PostBodyBlocksItemStylesItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostBodyBlocksItemStylesItemType) Or(d PostBodyBlocksItemStylesItemType) PostBodyBlocksItemStylesItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostBodyBlocksItemType returns new OptPostBodyBlocksItemType with value set to v.
func NewOptPostBodyBlocksItemType(v PostBodyBlocksItemType) OptPostBodyBlocksItemType {
	return OptPostBodyBlocksItemType{
		Value: v,
		Set:   true,
	}
}

// OptPostBodyBlocksItemType is optional PostBodyBlocksItemType.
type OptPostBodyBlocksItemType struct {
	Value PostBodyBlocksItemType
	Set   bool
}

// IsSet returns true if OptPostBodyBlocksItemType was set.
func (o OptPostBodyBlocksItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostBodyBlocksItemType) Reset() {
	var v PostBodyBlocksItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostBodyBlocksItemType) SetTo(v PostBodyBlocksItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostBodyBlocksItemType) Get() (v PostBodyBlocksItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostBodyBlocksItemType) Or(d PostBodyBlocksItemType) PostBodyBlocksItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostBodyImageMap returns new OptPostBodyImageMap with value set to v.
func NewOptPostBodyImageMap(v PostBodyImageMap) OptPostBodyImageMap {
	return OptPostBodyImageMap{
		Value: v,
		Set:   true,
	}
}

// OptPostBodyImageMap is optional PostBodyImageMap.
type OptPostBodyImageMap struct {
	Value PostBodyImageMap
	Set   bool
}

// IsSet returns true if OptPostBodyImageMap was set.
func (o OptPostBodyImageMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostBodyImageMap) Reset() {
	var v PostBodyImageMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostBodyImageMap) SetTo(v PostBodyImageMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostBodyImageMap) Get() (v PostBodyImageMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostBodyImageMap) Or(d PostBodyImageMap) PostBodyImageMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostBodyUrlEmbedMap returns new OptPostBodyUrlEmbedMap with value set to v.
func NewOptPostBodyUrlEmbedMap(v PostBodyUrlEmbedMap) OptPostBodyUrlEmbedMap {
	return OptPostBodyUrlEmbedMap{
		Value: v,
		Set:   true,
	}
}

// OptPostBodyUrlEmbedMap is optional PostBodyUrlEmbedMap.
type OptPostBodyUrlEmbedMap struct {
	Value PostBodyUrlEmbedMap
	Set   bool
}

// IsSet returns true if OptPostBodyUrlEmbedMap was set.
func (o OptPostBodyUrlEmbedMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostBodyUrlEmbedMap) Reset() {
	var v PostBodyUrlEmbedMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostBodyUrlEmbedMap) SetTo(v PostBodyUrlEmbedMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostBodyUrlEmbedMap) Get() (v PostBodyUrlEmbedMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostBodyUrlEmbedMap) Or(d PostBodyUrlEmbedMap) PostBodyUrlEmbedMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostBodyUrlEmbedMapItemPostInfo returns new OptPostBodyUrlEmbedMapItemPostInfo with value set to v.
func NewOptPostBodyUrlEmbedMapItemPostInfo(v PostBodyUrlEmbedMapItemPostInfo) OptPostBodyUrlEmbedMapItemPostInfo {
	return OptPostBodyUrlEmbedMapItemPostInfo{
		Value: v,
		Set:   true,
	}
}

// OptPostBodyUrlEmbedMapItemPostInfo is optional PostBodyUrlEmbedMapItemPostInfo.
type OptPostBodyUrlEmbedMapItemPostInfo struct {
	Value PostBodyUrlEmbedMapItemPostInfo
	Set   bool
}

// IsSet returns true if OptPostBodyUrlEmbedMapItemPostInfo was set.
func (o OptPostBodyUrlEmbedMapItemPostInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostBodyUrlEmbedMapItemPostInfo) Reset() {
	var v PostBodyUrlEmbedMapItemPostInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostBodyUrlEmbedMapItemPostInfo) SetTo(v PostBodyUrlEmbedMapItemPostInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostBodyUrlEmbedMapItemPostInfo) Get() (v PostBodyUrlEmbedMapItemPostInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostBodyUrlEmbedMapItemPostInfo) Or(d PostBodyUrlEmbedMapItemPostInfo) PostBodyUrlEmbedMapItemPostInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostBodyUrlEmbedMapItemType returns new OptPostBodyUrlEmbedMapItemType with value set to v.
func NewOptPostBodyUrlEmbedMapItemType(v PostBodyUrlEmbedMapItemType) OptPostBodyUrlEmbedMapItemType {
	return OptPostBodyUrlEmbedMapItemType{
		Value: v,
		Set:   true,
	}
}

// OptPostBodyUrlEmbedMapItemType is optional PostBodyUrlEmbedMapItemType.
type OptPostBodyUrlEmbedMapItemType struct {
	Value PostBodyUrlEmbedMapItemType
	Set   bool
}

// IsSet returns true if OptPostBodyUrlEmbedMapItemType was set.
func (o OptPostBodyUrlEmbedMapItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostBodyUrlEmbedMapItemType) Reset() {
	var v PostBodyUrlEmbedMapItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostBodyUrlEmbedMapItemType) SetTo(v PostBodyUrlEmbedMapItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostBodyUrlEmbedMapItemType) Get() (v PostBodyUrlEmbedMapItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostBodyUrlEmbedMapItemType) Or(d PostBodyUrlEmbedMapItemType) PostBodyUrlEmbedMapItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostStatus returns new OptPostStatus with value set to v.
func NewOptPostStatus(v PostStatus) OptPostStatus {
	return OptPostStatus{
		Value: v,
		Set:   true,
	}
}

// OptPostStatus is optional PostStatus.
type OptPostStatus struct {
	Value PostStatus
	Set   bool
}

// IsSet returns true if OptPostStatus was set.
func (o OptPostStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostStatus) Reset() {
	var v PostStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostStatus) SetTo(v PostStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostStatus) Get() (v PostStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostStatus) Or(d PostStatus) PostStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePostReq returns new OptUpdatePostReq with value set to v.
func NewOptUpdatePostReq(v UpdatePostReq) OptUpdatePostReq {
	return OptUpdatePostReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePostReq is optional UpdatePostReq.
type OptUpdatePostReq struct {
	Value UpdatePostReq
	Set   bool
}

// IsSet returns true if OptUpdatePostReq was set.
func (o OptUpdatePostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePostReq) Reset() {
	var v UpdatePostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePostReq) SetTo(v UpdatePostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePostReq) Get() (v UpdatePostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePostReq) Or(d UpdatePostReq) UpdatePostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePostReqStatus returns new OptUpdatePostReqStatus with value set to v.
func NewOptUpdatePostReqStatus(v UpdatePostReqStatus) OptUpdatePostReqStatus {
	return OptUpdatePostReqStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePostReqStatus is optional UpdatePostReqStatus.
type OptUpdatePostReqStatus struct {
	Value UpdatePostReqStatus
	Set   bool
}

// IsSet returns true if OptUpdatePostReqStatus was set.
func (o OptUpdatePostReqStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePostReqStatus) Reset() {
	var v UpdatePostReqStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePostReqStatus) SetTo(v UpdatePostReqStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePostReqStatus) Get() (v UpdatePostReqStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePostReqStatus) Or(d UpdatePostReqStatus) UpdatePostReqStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Post
type Post struct {
	ID          OptString     `json:"id"`
	Title       OptString     `json:"title"`
	Status      OptPostStatus `json:"status"`
	Permalink   OptString     `json:"permalink"`
	FeeRequired OptInt        `json:"feeRequired"`
	UpdatedAt   OptString     `json:"updatedAt"`
	PublishedAt OptString     `json:"publishedAt"`
	Body        OptPostBody   `json:"body"`
}

// GetID returns the value of ID.
func (s *Post) GetID() OptString {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Post) GetTitle() OptString {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *Post) GetStatus() OptPostStatus {
	return s.Status
}

// GetPermalink returns the value of Permalink.
func (s *Post) GetPermalink() OptString {
	return s.Permalink
}

// GetFeeRequired returns the value of FeeRequired.
func (s *Post) GetFeeRequired() OptInt {
	return s.FeeRequired
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Post) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetPublishedAt returns the value of PublishedAt.
func (s *Post) GetPublishedAt() OptString {
	return s.PublishedAt
}

// GetBody returns the value of Body.
func (s *Post) GetBody() OptPostBody {
	return s.Body
}

// SetID sets the value of ID.
func (s *Post) SetID(val OptString) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Post) SetTitle(val OptString) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *Post) SetStatus(val OptPostStatus) {
	s.Status = val
}

// SetPermalink sets the value of Permalink.
func (s *Post) SetPermalink(val OptString) {
	s.Permalink = val
}

// SetFeeRequired sets the value of FeeRequired.
func (s *Post) SetFeeRequired(val OptInt) {
	s.FeeRequired = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Post) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetPublishedAt sets the value of PublishedAt.
func (s *Post) SetPublishedAt(val OptString) {
	s.PublishedAt = val
}

// SetBody sets the value of Body.
func (s *Post) SetBody(val OptPostBody) {
	s.Body = val
}

type PostBody struct {
	Blocks      []PostBodyBlocksItem   `json:"blocks"`
	ImageMap    OptPostBodyImageMap    `json:"imageMap"`
	UrlEmbedMap OptPostBodyUrlEmbedMap `json:"urlEmbedMap"`
}

// GetBlocks returns the value of Blocks.
func (s *PostBody) GetBlocks() []PostBodyBlocksItem {
	return s.Blocks
}

// GetImageMap returns the value of ImageMap.
func (s *PostBody) GetImageMap() OptPostBodyImageMap {
	return s.ImageMap
}

// GetUrlEmbedMap returns the value of UrlEmbedMap.
func (s *PostBody) GetUrlEmbedMap() OptPostBodyUrlEmbedMap {
	return s.UrlEmbedMap
}

// SetBlocks sets the value of Blocks.
func (s *PostBody) SetBlocks(val []PostBodyBlocksItem) {
	s.Blocks = val
}

// SetImageMap sets the value of ImageMap.
func (s *PostBody) SetImageMap(val OptPostBodyImageMap) {
	s.ImageMap = val
}

// SetUrlEmbedMap sets the value of UrlEmbedMap.
func (s *PostBody) SetUrlEmbedMap(val OptPostBodyUrlEmbedMap) {
	s.UrlEmbedMap = val
}

type PostBodyBlocksItem struct {
	Type       OptPostBodyBlocksItemType      `json:"type"`
	Text       OptString                      `json:"text"`
	ImageId    OptString                      `json:"imageId"`
	UrlEmbedId OptString                      `json:"urlEmbedId"`
	Styles     []PostBodyBlocksItemStylesItem `json:"styles"`
}

// GetType returns the value of Type.
func (s *PostBodyBlocksItem) GetType() OptPostBodyBlocksItemType {
	return s.Type
}

// GetText returns the value of Text.
func (s *PostBodyBlocksItem) GetText() OptString {
	return s.Text
}

// GetImageId returns the value of ImageId.
func (s *PostBodyBlocksItem) GetImageId() OptString {
	return s.ImageId
}

// GetUrlEmbedId returns the value of UrlEmbedId.
func (s *PostBodyBlocksItem) GetUrlEmbedId() OptString {
	return s.UrlEmbedId
}

// GetStyles returns the value of Styles.
func (s *PostBodyBlocksItem) GetStyles() []PostBodyBlocksItemStylesItem {
	return s.Styles
}

// SetType sets the value of Type.
func (s *PostBodyBlocksItem) SetType(val OptPostBodyBlocksItemType) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *PostBodyBlocksItem) SetText(val OptString) {
	s.Text = val
}

// SetImageId sets the value of ImageId.
func (s *PostBodyBlocksItem) SetImageId(val OptString) {
	s.ImageId = val
}

// SetUrlEmbedId sets the value of UrlEmbedId.
func (s *PostBodyBlocksItem) SetUrlEmbedId(val OptString) {
	s.UrlEmbedId = val
}

// SetStyles sets the value of Styles.
func (s *PostBodyBlocksItem) SetStyles(val []PostBodyBlocksItemStylesItem) {
	s.Styles = val
}

type PostBodyBlocksItemStylesItem struct {
	Type   OptPostBodyBlocksItemStylesItemType `json:"type"`
	Offset OptInt                              `json:"offset"`
	Length OptInt                              `json:"length"`
}

// GetType returns the value of Type.
func (s *PostBodyBlocksItemStylesItem) GetType() OptPostBodyBlocksItemStylesItemType {
	return s.Type
}

// GetOffset returns the value of Offset.
func (s *PostBodyBlocksItemStylesItem) GetOffset() OptInt {
	return s.Offset
}

// GetLength returns the value of Length.
func (s *PostBodyBlocksItemStylesItem) GetLength() OptInt {
	return s.Length
}

// SetType sets the value of Type.
func (s *PostBodyBlocksItemStylesItem) SetType(val OptPostBodyBlocksItemStylesItemType) {
	s.Type = val
}

// SetOffset sets the value of Offset.
func (s *PostBodyBlocksItemStylesItem) SetOffset(val OptInt) {
	s.Offset = val
}

// SetLength sets the value of Length.
func (s *PostBodyBlocksItemStylesItem) SetLength(val OptInt) {
	s.Length = val
}

type PostBodyBlocksItemStylesItemType string

const (
	PostBodyBlocksItemStylesItemTypeBold PostBodyBlocksItemStylesItemType = "bold"
)

// AllValues returns all PostBodyBlocksItemStylesItemType values.
func (PostBodyBlocksItemStylesItemType) AllValues() []PostBodyBlocksItemStylesItemType {
	return []PostBodyBlocksItemStylesItemType{
		PostBodyBlocksItemStylesItemTypeBold,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostBodyBlocksItemStylesItemType) MarshalText() ([]byte, error) {
	switch s {
	case PostBodyBlocksItemStylesItemTypeBold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostBodyBlocksItemStylesItemType) UnmarshalText(data []byte) error {
	switch PostBodyBlocksItemStylesItemType(data) {
	case PostBodyBlocksItemStylesItemTypeBold:
		*s = PostBodyBlocksItemStylesItemTypeBold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PostBodyBlocksItemType string

const (
	PostBodyBlocksItemTypeP        PostBodyBlocksItemType = "p"
	PostBodyBlocksItemTypeHeader   PostBodyBlocksItemType = "header"
	PostBodyBlocksItemTypeImage    PostBodyBlocksItemType = "image"
	PostBodyBlocksItemTypeURLEmbed PostBodyBlocksItemType = "url_embed"
)

// AllValues returns all PostBodyBlocksItemType values.
func (PostBodyBlocksItemType) AllValues() []PostBodyBlocksItemType {
	return []PostBodyBlocksItemType{
		PostBodyBlocksItemTypeP,
		PostBodyBlocksItemTypeHeader,
		PostBodyBlocksItemTypeImage,
		PostBodyBlocksItemTypeURLEmbed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostBodyBlocksItemType) MarshalText() ([]byte, error) {
	switch s {
	case PostBodyBlocksItemTypeP:
		return []byte(s), nil
	case PostBodyBlocksItemTypeHeader:
		return []byte(s), nil
	case PostBodyBlocksItemTypeImage:
		return []byte(s), nil
	case PostBodyBlocksItemTypeURLEmbed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostBodyBlocksItemType) UnmarshalText(data []byte) error {
	switch PostBodyBlocksItemType(data) {
	case PostBodyBlocksItemTypeP:
		*s = PostBodyBlocksItemTypeP
		return nil
	case PostBodyBlocksItemTypeHeader:
		*s = PostBodyBlocksItemTypeHeader
		return nil
	case PostBodyBlocksItemTypeImage:
		*s = PostBodyBlocksItemTypeImage
		return nil
	case PostBodyBlocksItemTypeURLEmbed:
		*s = PostBodyBlocksItemTypeURLEmbed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PostBodyImageMap map[string]PostBodyImageMapItem

func (s *PostBodyImageMap) init() PostBodyImageMap {
	m := *s
	if m == nil {
		m = map[string]PostBodyImageMapItem{}
		*s = m
	}
	return m
}

type PostBodyImageMapItem struct {
	ID           OptString `json:"id"`
	Extension    OptString `json:"extension"`
	OriginalUrl  OptString `json:"originalUrl"`
	ThumbnailUrl OptString `json:"thumbnailUrl"`
}

// GetID returns the value of ID.
func (s *PostBodyImageMapItem) GetID() OptString {
	return s.ID
}

// GetExtension returns the value of Extension.
func (s *PostBodyImageMapItem) GetExtension() OptString {
	return s.Extension
}

// GetOriginalUrl returns the value of OriginalUrl.
func (s *PostBodyImageMapItem) GetOriginalUrl() OptString {
	return s.OriginalUrl
}

// GetThumbnailUrl returns the value of ThumbnailUrl.
func (s *PostBodyImageMapItem) GetThumbnailUrl() OptString {
	return s.ThumbnailUrl
}

// SetID sets the value of ID.
func (s *PostBodyImageMapItem) SetID(val OptString) {
	s.ID = val
}

// SetExtension sets the value of Extension.
func (s *PostBodyImageMapItem) SetExtension(val OptString) {
	s.Extension = val
}

// SetOriginalUrl sets the value of OriginalUrl.
func (s *PostBodyImageMapItem) SetOriginalUrl(val OptString) {
	s.OriginalUrl = val
}

// SetThumbnailUrl sets the value of ThumbnailUrl.
func (s *PostBodyImageMapItem) SetThumbnailUrl(val OptString) {
	s.ThumbnailUrl = val
}

type PostBodyUrlEmbedMap map[string]PostBodyUrlEmbedMapItem

func (s *PostBodyUrlEmbedMap) init() PostBodyUrlEmbedMap {
	m := *s
	if m == nil {
		m = map[string]PostBodyUrlEmbedMapItem{}
		*s = m
	}
	return m
}

type PostBodyUrlEmbedMapItem struct {
	ID       OptString                          `json:"id"`
	Type     OptPostBodyUrlEmbedMapItemType     `json:"type"`
	HTML     OptString                          `json:"html"`
	URL      OptString                          `json:"url"`
	PostInfo OptPostBodyUrlEmbedMapItemPostInfo `json:"postInfo"`
}

// GetID returns the value of ID.
func (s *PostBodyUrlEmbedMapItem) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *PostBodyUrlEmbedMapItem) GetType() OptPostBodyUrlEmbedMapItemType {
	return s.Type
}

// GetHTML returns the value of HTML.
func (s *PostBodyUrlEmbedMapItem) GetHTML() OptString {
	return s.HTML
}

// GetURL returns the value of URL.
func (s *PostBodyUrlEmbedMapItem) GetURL() OptString {
	return s.URL
}

// GetPostInfo returns the value of PostInfo.
func (s *PostBodyUrlEmbedMapItem) GetPostInfo() OptPostBodyUrlEmbedMapItemPostInfo {
	return s.PostInfo
}

// SetID sets the value of ID.
func (s *PostBodyUrlEmbedMapItem) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *PostBodyUrlEmbedMapItem) SetType(val OptPostBodyUrlEmbedMapItemType) {
	s.Type = val
}

// SetHTML sets the value of HTML.
func (s *PostBodyUrlEmbedMapItem) SetHTML(val OptString) {
	s.HTML = val
}

// SetURL sets the value of URL.
func (s *PostBodyUrlEmbedMapItem) SetURL(val OptString) {
	s.URL = val
}

// SetPostInfo sets the value of PostInfo.
func (s *PostBodyUrlEmbedMapItem) SetPostInfo(val OptPostBodyUrlEmbedMapItemPostInfo) {
	s.PostInfo = val
}

type PostBodyUrlEmbedMapItemPostInfo struct {
	ID        OptString `json:"id"`
	CreatorId OptString `json:"creatorId"`
}

// GetID returns the value of ID.
func (s *PostBodyUrlEmbedMapItemPostInfo) GetID() OptString {
	return s.ID
}

// GetCreatorId returns the value of CreatorId.
func (s *PostBodyUrlEmbedMapItemPostInfo) GetCreatorId() OptString {
	return s.CreatorId
}

// SetID sets the value of ID.
func (s *PostBodyUrlEmbedMapItemPostInfo) SetID(val OptString) {
	s.ID = val
}

// SetCreatorId sets the value of CreatorId.
func (s *PostBodyUrlEmbedMapItemPostInfo) SetCreatorId(val OptString) {
	s.CreatorId = val
}

type PostBodyUrlEmbedMapItemType string

const (
	PostBodyUrlEmbedMapItemTypeHTMLCard   PostBodyUrlEmbedMapItemType = "html.card"
	PostBodyUrlEmbedMapItemTypeHTML       PostBodyUrlEmbedMapItemType = "html"
	PostBodyUrlEmbedMapItemTypeFanboxPost PostBodyUrlEmbedMapItemType = "fanbox.post"
	PostBodyUrlEmbedMapItemTypeDefault    PostBodyUrlEmbedMapItemType = "default"
)

// AllValues returns all PostBodyUrlEmbedMapItemType values.
func (PostBodyUrlEmbedMapItemType) AllValues() []PostBodyUrlEmbedMapItemType {
	return []PostBodyUrlEmbedMapItemType{
		PostBodyUrlEmbedMapItemTypeHTMLCard,
		PostBodyUrlEmbedMapItemTypeHTML,
		PostBodyUrlEmbedMapItemTypeFanboxPost,
		PostBodyUrlEmbedMapItemTypeDefault,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostBodyUrlEmbedMapItemType) MarshalText() ([]byte, error) {
	switch s {
	case PostBodyUrlEmbedMapItemTypeHTMLCard:
		return []byte(s), nil
	case PostBodyUrlEmbedMapItemTypeHTML:
		return []byte(s), nil
	case PostBodyUrlEmbedMapItemTypeFanboxPost:
		return []byte(s), nil
	case PostBodyUrlEmbedMapItemTypeDefault:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostBodyUrlEmbedMapItemType) UnmarshalText(data []byte) error {
	switch PostBodyUrlEmbedMapItemType(data) {
	case PostBodyUrlEmbedMapItemTypeHTMLCard:
		*s = PostBodyUrlEmbedMapItemTypeHTMLCard
		return nil
	case PostBodyUrlEmbedMapItemTypeHTML:
		*s = PostBodyUrlEmbedMapItemTypeHTML
		return nil
	case PostBodyUrlEmbedMapItemTypeFanboxPost:
		*s = PostBodyUrlEmbedMapItemTypeFanboxPost
		return nil
	case PostBodyUrlEmbedMapItemTypeDefault:
		*s = PostBodyUrlEmbedMapItemTypeDefault
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PostStatus string

const (
	PostStatusDraft     PostStatus = "draft"
	PostStatusPublished PostStatus = "published"
)

// AllValues returns all PostStatus values.
func (PostStatus) AllValues() []PostStatus {
	return []PostStatus{
		PostStatusDraft,
		PostStatusPublished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostStatus) MarshalText() ([]byte, error) {
	switch s {
	case PostStatusDraft:
		return []byte(s), nil
	case PostStatusPublished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostStatus) UnmarshalText(data []byte) error {
	switch PostStatus(data) {
	case PostStatusDraft:
		*s = PostStatusDraft
		return nil
	case PostStatusPublished:
		*s = PostStatusPublished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SessionId struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *SessionId) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *SessionId) SetAPIKey(val string) {
	s.APIKey = val
}

type Update struct {
	Body OptPost `json:"body"`
}

// GetBody returns the value of Body.
func (s *Update) GetBody() OptPost {
	return s.Body
}

// SetBody sets the value of Body.
func (s *Update) SetBody(val OptPost) {
	s.Body = val
}

func (*Update) updatePostRes() {}

type UpdatePostReq struct {
	PostId      OptString              `json:"postId"`
	Status      OptUpdatePostReqStatus `json:"status"`
	FeeRequired OptString              `json:"feeRequired"`
	Title       OptString              `json:"title"`
	Body        OptString              `json:"body"`
	Tags        []string               `json:"tags"`
	Tt          OptString              `json:"tt"`
}

// GetPostId returns the value of PostId.
func (s *UpdatePostReq) GetPostId() OptString {
	return s.PostId
}

// GetStatus returns the value of Status.
func (s *UpdatePostReq) GetStatus() OptUpdatePostReqStatus {
	return s.Status
}

// GetFeeRequired returns the value of FeeRequired.
func (s *UpdatePostReq) GetFeeRequired() OptString {
	return s.FeeRequired
}

// GetTitle returns the value of Title.
func (s *UpdatePostReq) GetTitle() OptString {
	return s.Title
}

// GetBody returns the value of Body.
func (s *UpdatePostReq) GetBody() OptString {
	return s.Body
}

// GetTags returns the value of Tags.
func (s *UpdatePostReq) GetTags() []string {
	return s.Tags
}

// GetTt returns the value of Tt.
func (s *UpdatePostReq) GetTt() OptString {
	return s.Tt
}

// SetPostId sets the value of PostId.
func (s *UpdatePostReq) SetPostId(val OptString) {
	s.PostId = val
}

// SetStatus sets the value of Status.
func (s *UpdatePostReq) SetStatus(val OptUpdatePostReqStatus) {
	s.Status = val
}

// SetFeeRequired sets the value of FeeRequired.
func (s *UpdatePostReq) SetFeeRequired(val OptString) {
	s.FeeRequired = val
}

// SetTitle sets the value of Title.
func (s *UpdatePostReq) SetTitle(val OptString) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *UpdatePostReq) SetBody(val OptString) {
	s.Body = val
}

// SetTags sets the value of Tags.
func (s *UpdatePostReq) SetTags(val []string) {
	s.Tags = val
}

// SetTt sets the value of Tt.
func (s *UpdatePostReq) SetTt(val OptString) {
	s.Tt = val
}

type UpdatePostReqStatus string

const (
	UpdatePostReqStatusDraft     UpdatePostReqStatus = "draft"
	UpdatePostReqStatusPublished UpdatePostReqStatus = "published"
)

// AllValues returns all UpdatePostReqStatus values.
func (UpdatePostReqStatus) AllValues() []UpdatePostReqStatus {
	return []UpdatePostReqStatus{
		UpdatePostReqStatusDraft,
		UpdatePostReqStatusPublished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdatePostReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdatePostReqStatusDraft:
		return []byte(s), nil
	case UpdatePostReqStatusPublished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdatePostReqStatus) UnmarshalText(data []byte) error {
	switch UpdatePostReqStatus(data) {
	case UpdatePostReqStatusDraft:
		*s = UpdatePostReqStatusDraft
		return nil
	case UpdatePostReqStatusPublished:
		*s = UpdatePostReqStatusPublished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
